generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id               String   @id @default(uuid())
  clerkUserId      String   @unique
  stripeCustomerId String?  @unique
  createdAt        DateTime @default(now())
  email            String   @unique
  firstName        String
  lastName         String

  subscription        UserSubscription?
  userPlatformConfigs UserPlatformConfig[]
}

model UserPlatformConfig {
  userId           String
  platformConfigId String

  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  platformConfig PlatformConfig @relation(fields: [platformConfigId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, platformConfigId])
  @@index([userId])
  @@index([platformConfigId])
}

// TODO CHANGE THE UPPERCASE
model PlatformConfig {
  id                  String               @id @default(uuid())
  name                String
  CharacterCount      Int
  Tone                String
  EmojiQuantity       String
  EmojiVibe           String
  HashtagCount        Int
  IsDefault           Boolean?
  userPlatformConfigs UserPlatformConfig[]
  Platform            Platform             @relation(fields: [name], references: [name], onDelete: Cascade, onUpdate: Cascade)

  @@index([name])
}

model UserSubscription {
  id                     String   @id @default(uuid())
  stripeCustomerId       String   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime @map(name: "stripe_current_period_end")
  user                   User     @relation(fields: [stripeCustomerId], references: [stripeCustomerId], onDelete: Cascade, onUpdate: Cascade)
}

model BlurbRequest {
  id              String         @id @default(uuid())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  brandName       String
  theme           String
  description     String
  links           String
  targetAudience  String
  includeEmojis   Boolean
  includeHashtags Boolean
  variants        BlurbVariant[]
}

model BlurbVariant {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  content        String       @db.Text
  platformName   String
  blurbRequestId String
  platform       Platform     @relation(fields: [platformName], references: [name])
  BlurbRequest   BlurbRequest @relation(fields: [blurbRequestId], references: [id])

  @@index([platformName])
  @@index([blurbRequestId])
}

model Platform {
  name           String           @id
  blurbVariants  BlurbVariant[]
  PlaformConfigs PlatformConfig[]
}
